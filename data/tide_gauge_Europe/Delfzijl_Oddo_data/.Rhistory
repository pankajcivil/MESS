bounds_calib[i,'lower'] <- bounds[parnames_calib[i],'bound_lower']
bounds_calib[i,'upper'] <- bounds[parnames_calib[i],'bound_upper']
}
# Other characteristics are in 'input' and 'time_arrays', which are fed into
# the calibration MCMC call below.
##==============================================================================
##==============================================================================
## Pad if only one calibration parameter
## (adaptMCMC requires 2 or more)
##======================================
if(length(parnames_calib)==1){
parnames_calib <- c(parnames_calib, "padding")
bounds_calib <- rbind(bounds_calib,c(-Inf,Inf))
rownames(bounds_calib) <- parnames_calib
par_calib0 <- c(par_calib0, 0)
step_mcmc <- c(step_mcmc, 1)
}
##==============================================================================
##==============================================================================
## Run the calibration
##====================
# need the physical model
source('model_forMCMC.R')
# need the likelihood function and prior distributions
source('GEOCARB-2014_calib_likelihood.R')
# set up and run the actual calibration
# interpolate between lots of parameters and one parameter.
# this functional form yields an acceptance rate of about 25% for as few as 10
# parameters, 44% for a single parameter (or Metropolis-within-Gibbs sampler),
# and 0.234 for infinite number of parameters, using accept_mcmc_few=0.44 and
# accept_mcmc_many=0.234.
library(adaptMCMC)
accept_mcmc_few <- 0.44         # optimal for only one parameter
accept_mcmc_many <- 0.234       # optimal for many parameters
accept_mcmc <- accept_mcmc_many + (accept_mcmc_few - accept_mcmc_many)/length(parnames_calib)
niter_mcmc <- 1e3
gamma_mcmc <- 0.5
stopadapt_mcmc <- round(niter_mcmc*1.0)# stop adapting after ?? iterations? (niter*1 => don't stop)
##==============================================================================
## Actually run the calibration
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, par_calib0, adapt=TRUE, acc.rate=accept_mcmc,
scale=step_mcmc, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tend=proc.time()
chain1 = amcmc_out1$samples
##==============================================================================
plot(chain1[,5], type='l')
# Which proxy sets to assimilate? (set what you want to "TRUE", others to "FALSE")
data_to_assim <- cbind( c("paleosols" , FALSE),
c("alkenones" , FALSE),
c("stomata"   , FALSE),
c("boron"     , TRUE),
c("liverworts", FALSE) )
ind_data    <- which(data_to_assim[2,]==TRUE)
n_data_sets <- length(ind_data)
ind_assim   <- vector("list",n_data_sets)
for (i in 1:n_data_sets) {
ind_assim[[i]] <- which(as.character(data_calib_all$proxy_type) == data_to_assim[1,ind_data[i]])
}
data_calib <- data_calib_all[unlist(ind_assim),]
# assumption of steady state in-between model time steps permits figuring out
# which model time steps each data point should be compared against in advance.
# doing this each calibration iteration would be outrageous!
# This assumes the model time step is 10 million years, seq(570,0,by=-10). The
# model will choke later (in calibration) if this is not consistent with what is
# set within the actual GEOCARB physical model.
age_tmp <- seq(570,0,by=-10)
ttmp <- 10*ceiling(data_calib$age/10)
ind_mod2obs <- rep(NA,nrow(data_calib))
for (i in 1:length(ind_mod2obs)){
ind_mod2obs[i] <- which(age_tmp==ttmp[i])
}
##==============================================================================
##==============================================================================
## Model parameters and setup
##===========================
# Read parameter information, set up the calibration parameters
source('GEOCARB-2014_parameterSetup.R')
##==============================================================================
##==============================================================================
## Calibration parameter prior distributions
##==========================================
# Get model parameter prior distributions
names <- as.character(input$parameter)
bound_lower <- rep(NA, length(names))
bound_upper <- rep(NA, length(names))
ind_neg_inf <- which(input[,'lower_limit']=='_inf')
bound_lower[ind_neg_inf] <- -Inf
bound_lower[setdiff(1:length(names), ind_neg_inf)] <- as.numeric(as.character(input$lower_limit[setdiff(1:length(names), ind_neg_inf)]))
bound_upper <- input$upper_limit
bounds <- cbind(bound_lower, bound_upper)
rownames(bounds) <- as.character(input$parameter)
# only actually need the calibration parameters' bounds, so reformat the bounds
# array to match the vector of calibration parameters
bounds_calib <- mat.or.vec(nr=length(parnames_calib), nc=2)
colnames(bounds_calib) <- c('lower','upper')
rownames(bounds_calib) <- parnames_calib
for (i in 1:length(parnames_calib)) {
bounds_calib[i,'lower'] <- bounds[parnames_calib[i],'bound_lower']
bounds_calib[i,'upper'] <- bounds[parnames_calib[i],'bound_upper']
}
# Other characteristics are in 'input' and 'time_arrays', which are fed into
# the calibration MCMC call below.
##==============================================================================
##==============================================================================
## Pad if only one calibration parameter
## (adaptMCMC requires 2 or more)
##======================================
if(length(parnames_calib)==1){
parnames_calib <- c(parnames_calib, "padding")
bounds_calib <- rbind(bounds_calib,c(-Inf,Inf))
rownames(bounds_calib) <- parnames_calib
par_calib0 <- c(par_calib0, 0)
step_mcmc <- c(step_mcmc, 1)
}
##==============================================================================
##==============================================================================
## Run the calibration
##====================
# need the physical model
source('model_forMCMC.R')
# need the likelihood function and prior distributions
source('GEOCARB-2014_calib_likelihood.R')
# set up and run the actual calibration
# interpolate between lots of parameters and one parameter.
# this functional form yields an acceptance rate of about 25% for as few as 10
# parameters, 44% for a single parameter (or Metropolis-within-Gibbs sampler),
# and 0.234 for infinite number of parameters, using accept_mcmc_few=0.44 and
# accept_mcmc_many=0.234.
library(adaptMCMC)
accept_mcmc_few <- 0.44         # optimal for only one parameter
accept_mcmc_many <- 0.234       # optimal for many parameters
accept_mcmc <- accept_mcmc_many + (accept_mcmc_few - accept_mcmc_many)/length(parnames_calib)
niter_mcmc <- 1e3
gamma_mcmc <- 0.5
stopadapt_mcmc <- round(niter_mcmc*1.0)# stop adapting after ?? iterations? (niter*1 => don't stop)
##==============================================================================
## Actually run the calibration
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, par_calib0, adapt=TRUE, acc.rate=accept_mcmc,
scale=step_mcmc, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
rm(list=ls())
##==============================================================================
## Data
##=====
# Read proxy data. Returns "data_calib_all"
library(sn)
source('GEOCARB-2014_getData.R')
# Which proxy sets to assimilate? (set what you want to "TRUE", others to "FALSE")
data_to_assim <- cbind( c("paleosols" , FALSE),
c("alkenones" , TRUE),
c("stomata"   , TRUE),
c("boron"     , TRUE),
c("liverworts", TRUE) )
ind_data    <- which(data_to_assim[2,]==TRUE)
n_data_sets <- length(ind_data)
ind_assim   <- vector("list",n_data_sets)
for (i in 1:n_data_sets) {
ind_assim[[i]] <- which(as.character(data_calib_all$proxy_type) == data_to_assim[1,ind_data[i]])
}
data_calib <- data_calib_all[unlist(ind_assim),]
# assumption of steady state in-between model time steps permits figuring out
# which model time steps each data point should be compared against in advance.
# doing this each calibration iteration would be outrageous!
# This assumes the model time step is 10 million years, seq(570,0,by=-10). The
# model will choke later (in calibration) if this is not consistent with what is
# set within the actual GEOCARB physical model.
age_tmp <- seq(570,0,by=-10)
ttmp <- 10*ceiling(data_calib$age/10)
ind_mod2obs <- rep(NA,nrow(data_calib))
for (i in 1:length(ind_mod2obs)){
ind_mod2obs[i] <- which(age_tmp==ttmp[i])
}
##==============================================================================
##==============================================================================
## Model parameters and setup
##===========================
# Read parameter information, set up the calibration parameters
source('GEOCARB-2014_parameterSetup.R')
##==============================================================================
##==============================================================================
## Calibration parameter prior distributions
##==========================================
# Get model parameter prior distributions
names <- as.character(input$parameter)
bound_lower <- rep(NA, length(names))
bound_upper <- rep(NA, length(names))
ind_neg_inf <- which(input[,'lower_limit']=='_inf')
bound_lower[ind_neg_inf] <- -Inf
bound_lower[setdiff(1:length(names), ind_neg_inf)] <- as.numeric(as.character(input$lower_limit[setdiff(1:length(names), ind_neg_inf)]))
bound_upper <- input$upper_limit
bounds <- cbind(bound_lower, bound_upper)
rownames(bounds) <- as.character(input$parameter)
# only actually need the calibration parameters' bounds, so reformat the bounds
# array to match the vector of calibration parameters
bounds_calib <- mat.or.vec(nr=length(parnames_calib), nc=2)
colnames(bounds_calib) <- c('lower','upper')
rownames(bounds_calib) <- parnames_calib
for (i in 1:length(parnames_calib)) {
bounds_calib[i,'lower'] <- bounds[parnames_calib[i],'bound_lower']
bounds_calib[i,'upper'] <- bounds[parnames_calib[i],'bound_upper']
}
# Other characteristics are in 'input' and 'time_arrays', which are fed into
# the calibration MCMC call below.
##==============================================================================
##==============================================================================
## Pad if only one calibration parameter
## (adaptMCMC requires 2 or more)
##======================================
if(length(parnames_calib)==1){
parnames_calib <- c(parnames_calib, "padding")
bounds_calib <- rbind(bounds_calib,c(-Inf,Inf))
rownames(bounds_calib) <- parnames_calib
par_calib0 <- c(par_calib0, 0)
step_mcmc <- c(step_mcmc, 1)
}
##==============================================================================
##==============================================================================
## Run the calibration
##====================
# need the physical model
source('model_forMCMC.R')
# need the likelihood function and prior distributions
source('GEOCARB-2014_calib_likelihood.R')
# set up and run the actual calibration
# interpolate between lots of parameters and one parameter.
# this functional form yields an acceptance rate of about 25% for as few as 10
# parameters, 44% for a single parameter (or Metropolis-within-Gibbs sampler),
# and 0.234 for infinite number of parameters, using accept_mcmc_few=0.44 and
# accept_mcmc_many=0.234.
library(adaptMCMC)
accept_mcmc_few <- 0.44         # optimal for only one parameter
accept_mcmc_many <- 0.234       # optimal for many parameters
accept_mcmc <- accept_mcmc_many + (accept_mcmc_few - accept_mcmc_many)/length(parnames_calib)
niter_mcmc <- 1e3
gamma_mcmc <- 0.5
stopadapt_mcmc <- round(niter_mcmc*1.0)# stop adapting after ?? iterations? (niter*1 => don't stop)
##==============================================================================
## Actually run the calibration
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, par_calib0, adapt=TRUE, acc.rate=accept_mcmc,
scale=step_mcmc, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tend=proc.time()
chain1 = amcmc_out1$samples
##==============================================================================
plot(chain1[,5], type='l')
plot(chain1[,1], type='l')
hist(chain1[,1])
hist(chain1[,2])
amcmc_out1$acceptance.rate
amcmc_out1$cov.jump
dim(data_calib)
rm(list=ls())
##==============================================================================
## Data
##=====
# Read proxy data. Returns "data_calib_all"
library(sn)
source('GEOCARB-2014_getData.R')
# Which proxy sets to assimilate? (set what you want to "TRUE", others to "FALSE")
data_to_assim <- cbind( c("paleosols" , FALSE),
c("alkenones" , TRUE),
c("stomata"   , TRUE),
c("boron"     , TRUE),
c("liverworts", TRUE) )
ind_data    <- which(data_to_assim[2,]==TRUE)
n_data_sets <- length(ind_data)
ind_assim   <- vector("list",n_data_sets)
for (i in 1:n_data_sets) {
ind_assim[[i]] <- which(as.character(data_calib_all$proxy_type) == data_to_assim[1,ind_data[i]])
}
data_calib <- data_calib_all[unlist(ind_assim),]
# assumption of steady state in-between model time steps permits figuring out
# which model time steps each data point should be compared against in advance.
# doing this each calibration iteration would be outrageous!
# This assumes the model time step is 10 million years, seq(570,0,by=-10). The
# model will choke later (in calibration) if this is not consistent with what is
# set within the actual GEOCARB physical model.
age_tmp <- seq(570,0,by=-10)
ttmp <- 10*ceiling(data_calib$age/10)
ind_mod2obs <- rep(NA,nrow(data_calib))
for (i in 1:length(ind_mod2obs)){
ind_mod2obs[i] <- which(age_tmp==ttmp[i])
}
##==============================================================================
##==============================================================================
## Model parameters and setup
##===========================
# Read parameter information, set up the calibration parameters
source('GEOCARB-2014_parameterSetup.R')
##==============================================================================
##==============================================================================
## Calibration parameter prior distributions
##==========================================
# Get model parameter prior distributions
names <- as.character(input$parameter)
bound_lower <- rep(NA, length(names))
bound_upper <- rep(NA, length(names))
ind_neg_inf <- which(input[,'lower_limit']=='_inf')
bound_lower[ind_neg_inf] <- -Inf
bound_lower[setdiff(1:length(names), ind_neg_inf)] <- as.numeric(as.character(input$lower_limit[setdiff(1:length(names), ind_neg_inf)]))
bound_upper <- input$upper_limit
bounds <- cbind(bound_lower, bound_upper)
rownames(bounds) <- as.character(input$parameter)
# only actually need the calibration parameters' bounds, so reformat the bounds
# array to match the vector of calibration parameters
bounds_calib <- mat.or.vec(nr=length(parnames_calib), nc=2)
colnames(bounds_calib) <- c('lower','upper')
rownames(bounds_calib) <- parnames_calib
for (i in 1:length(parnames_calib)) {
bounds_calib[i,'lower'] <- bounds[parnames_calib[i],'bound_lower']
bounds_calib[i,'upper'] <- bounds[parnames_calib[i],'bound_upper']
}
# Other characteristics are in 'input' and 'time_arrays', which are fed into
# the calibration MCMC call below.
##==============================================================================
##==============================================================================
## Pad if only one calibration parameter
## (adaptMCMC requires 2 or more)
##======================================
if(length(parnames_calib)==1){
parnames_calib <- c(parnames_calib, "padding")
bounds_calib <- rbind(bounds_calib,c(-Inf,Inf))
rownames(bounds_calib) <- parnames_calib
par_calib0 <- c(par_calib0, 0)
step_mcmc <- c(step_mcmc, 1)
}
##==============================================================================
##==============================================================================
## Run the calibration
##====================
# need the physical model
source('model_forMCMC.R')
# need the likelihood function and prior distributions
source('GEOCARB-2014_calib_likelihood.R')
# set up and run the actual calibration
# interpolate between lots of parameters and one parameter.
# this functional form yields an acceptance rate of about 25% for as few as 10
# parameters, 44% for a single parameter (or Metropolis-within-Gibbs sampler),
# and 0.234 for infinite number of parameters, using accept_mcmc_few=0.44 and
# accept_mcmc_many=0.234.
library(adaptMCMC)
accept_mcmc_few <- 0.44         # optimal for only one parameter
accept_mcmc_many <- 0.234       # optimal for many parameters
accept_mcmc <- accept_mcmc_many + (accept_mcmc_few - accept_mcmc_many)/length(parnames_calib)
niter_mcmc <- 1e3
gamma_mcmc <- 0.5
stopadapt_mcmc <- round(niter_mcmc*1.0)# stop adapting after ?? iterations? (niter*1 => don't stop)
##==============================================================================
## Actually run the calibration
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, par_calib0, adapt=TRUE, acc.rate=accept_mcmc,
scale=step_mcmc, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tend=proc.time()
chain1 = amcmc_out1$samples
##==============================================================================
ind_cs <- match('deltaT2X',parnames_calib)
plot(chain1[,ind_cs], type='l')
tend-tbeg
# need the physical model
source('model_forMCMC.R')
# need the likelihood function and prior distributions
source('GEOCARB-2014_calib_likelihood.R')
# set up and run the actual calibration
# interpolate between lots of parameters and one parameter.
# this functional form yields an acceptance rate of about 25% for as few as 10
# parameters, 44% for a single parameter (or Metropolis-within-Gibbs sampler),
# and 0.234 for infinite number of parameters, using accept_mcmc_few=0.44 and
# accept_mcmc_many=0.234.
library(adaptMCMC)
accept_mcmc_few <- 0.44         # optimal for only one parameter
accept_mcmc_many <- 0.234       # optimal for many parameters
accept_mcmc <- accept_mcmc_many + (accept_mcmc_few - accept_mcmc_many)/length(parnames_calib)
niter_mcmc <- 1e4
gamma_mcmc <- 0.5
stopadapt_mcmc <- round(niter_mcmc*1.0)# stop adapting after ?? iterations? (niter*1 => don't stop)
##==============================================================================
## Actually run the calibration
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, par_calib0, adapt=TRUE, acc.rate=accept_mcmc,
scale=amcmc_out1$cov.jump, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tend=proc.time()
chain1 = amcmc_out1$samples
ind_cs <- match('deltaT2X',parnames_calib)
plot(chain1[,ind_cs], type='l')
tend-tbeg
(tend-tbeg)/niter_mcmc
1e5*(tend-tbeg)/niter_mcmc
(tend-tbeg)/60
3600/((tend-tbeg)/niter_mcmc)
niter_extend <- 4e4
tbeg=proc.time()
amcmc_extend1 = MCMC.add.samples(amcmc_out1, niter_extend,
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tend=proc.time()
chain1 = amcmc_extend1$samples
ind_cs <- match('deltaT2X',parnames_calib)
plot(chain1[,ind_cs], type='l')
par(mfrow=c(7,8))
for (p in 1:length(parnames_calib)) {plot(chain1[,p], type='l')}
for (p in 1:length(parnames_calib)) {plot(chain1[,p], type='l', ylab=parnames_calib[p])}
cov.jump <- amcmc_extend1$cov.jump
data_to_assim <- cbind( c("paleosols" , TRUE),
c("alkenones" , TRUE),
c("stomata"   , TRUE),
c("boron"     , TRUE),
c("liverworts", TRUE) )
ind_data    <- which(data_to_assim[2,]==TRUE)
n_data_sets <- length(ind_data)
ind_assim   <- vector("list",n_data_sets)
for (i in 1:n_data_sets) {
ind_assim[[i]] <- which(as.character(data_calib_all$proxy_type) == data_to_assim[1,ind_data[i]])
}
data_calib <- data_calib_all[unlist(ind_assim),]
# assumption of steady state in-between model time steps permits figuring out
# which model time steps each data point should be compared against in advance.
# doing this each calibration iteration would be outrageous!
# This assumes the model time step is 10 million years, seq(570,0,by=-10). The
# model will choke later (in calibration) if this is not consistent with what is
# set within the actual GEOCARB physical model.
age_tmp <- seq(570,0,by=-10)
ttmp <- 10*ceiling(data_calib$age/10)
ind_mod2obs <- rep(NA,nrow(data_calib))
for (i in 1:length(ind_mod2obs)){
ind_mod2obs[i] <- which(age_tmp==ttmp[i])
}
niter_mcmc
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, par_calib0, adapt=TRUE, acc.rate=accept_mcmc,
scale=step_mcmc, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, par_calib0, adapt=TRUE, acc.rate=accept_mcmc,
scale=cov.jump, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
dim(chain1)
tbeg=proc.time()
amcmc_out1 = MCMC(log_post, niter_mcmc, chain1[50000,], adapt=TRUE, acc.rate=accept_mcmc,
scale=cov.jump, gamma=gamma_mcmc, list=TRUE, n.start=max(500,round(0.05*niter_mcmc)),
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tend=proc.time()
chain1 = amcmc_out1$samples
for (p in 1:length(parnames_calib)) {plot(chain1[,p], type='l', ylab=parnames_calib[p])}
amcmc_nopaleosols <- amcmc_extend1
niter_extend <- 4e4
tbeg=proc.time()
amcmc_extend1 = MCMC.add.samples(amcmc_out1, niter_extend,
par_fixed=par_fixed0, parnames_calib=parnames_calib,
parnames_fixed=parnames_fixed, age=age, ageN=ageN,
ind_const_calib=ind_const_calib, ind_time_calib=ind_time_calib,
ind_const_fixed=ind_const_fixed, ind_time_fixed=ind_time_fixed,
input=input, time_arrays=time_arrays, bounds_calib=bounds_calib,
data_calib=data_calib, ind_mod2obs=ind_mod2obs)
tend=proc.time()
chain1 = amcmc_extend1$samples
for (p in 1:length(parnames_calib)) {plot(chain1[,p], type='l', ylab=parnames_calib[p])}
1967.9584-1967.8750
1967.8750-1967.7916
setwd('/Users/axw322/Box Sync/Wong-Projects')
setwd('/Users/axw322/Box Sync/Wong-Projects/stormsurgeEVT')
setwd('/Users/axw322/Box Sync/Wong-Projects/stormsurgeEVT/Oddo\ Data')
.0834*365.25
